import{_ as t,r as e,o as p,c as o,b as n,d as a,e as c,a as l}from"./app-0db4a283.js";const i={},u=n("h2",{id:"版本信息",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#版本信息","aria-hidden":"true"},"#"),a(" 版本信息")],-1),d=n("blockquote",null,[n("ul",null,[n("li",null,"node：16.14.2"),n("li",null,"npm：8.5.0"),n("li",null,"vite ： 4.4.5"),n("li",null,"vue：3.3.4")])],-1),r=n("h2",{id:"项目搭建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#项目搭建","aria-hidden":"true"},"#"),a(" 项目搭建")],-1),k={href:"https://cn.vitejs.dev/config/",target:"_blank",rel:"noopener noreferrer"},v=l(`<h3 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h3><blockquote><ul><li><code>my-vue-app</code>：项目的名称，小写多个单词用<code>-</code>分割</li><li><code>template</code>“：指定vite创建的项目模板，这里指定创建vue</li></ul></blockquote><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment"># npm 6.x</span>
npm create vite@latest my-vue-app <span class="token operator">--</span>template vue

<span class="token comment"># npm 7+, extra double-dash is needed:</span>
npm create vite@latest my-vue-app <span class="token operator">--</span> <span class="token operator">--</span>template vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://file.zjay.top//blog/images/202308301614738.png" alt="image-20230830161436887"></p><h3 id="运行项目" tabindex="-1"><a class="header-anchor" href="#运行项目" aria-hidden="true">#</a> 运行项目</h3><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment"># 切换到项目路径</span>
cd vue3-study 
<span class="token comment"># 安装依赖</span>
npm install
<span class="token comment"># 运行</span>
npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://file.zjay.top//blog/images/202308301621915.png" alt="image-20230830162058314"></p><p><img src="http://file.zjay.top//blog/images/202308301621201.png" alt="image-20230830162153965"></p><h3 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h3><blockquote><ul><li><p><code>node_modules</code>：安装的依赖模块文件</p></li><li><p><code>public</code>：存放项目需要使用的静态资源，不参加编译，编译后可以替换</p></li><li><p><code>src</code>：项目开发目录</p><ul><li><p><code>assets</code>：放置静态资源，参加编译，编译后不可替换</p></li><li><p><code>components</code>：放置通用模块组件</p></li><li><p><code>App.vue</code>：入口组件</p></li><li><p><code>main.js</code>：入口 js 文件，影响全局，作用是引入全局使用的库、公共的样式和方法、设置路由等</p></li><li><p><code>style.css</code>：全局样式，默认会在<code>main.js</code>引用，可以放到<code>assets</code>，只需修改引用路径即可</p></li></ul></li><li><p><code>index.html</code>：项目的运行入口</p></li><li><p><code>package.json</code>：记录项目信息和依赖模块信息，如果文件不存在可以通过<code>npm init --yes</code>来初始化生成<code>package.json</code>文件</p></li><li><p><code>package-lock.json</code>：记录所有模块锁定的版本号，包括主模块和所有依赖子模块。当你执行<code>npm install</code>的时候，<code>node</code>从<code>package.json</code>文件读取模块名称，从<code>package-lock.json</code>文件中获取版本号，然后进行下载或者更新。正因为有了<code>package-lock.json</code>文件锁定版本号，所以当你执行<code>npm install</code>的时候，<code>node</code>不会自动更新<code>package.json</code>文件中的模块，必须用<code>npm install packagename@x.x.x</code>进行安装才会更新，<code>package-lock.json</code>文件中的版本号也会随着更新，如果文件不存在那么可以执行<code>npm install</code>，<code>node</code>会重新生成<code>package-lock.json</code>文件</p></li><li><p><code>README.md</code>：项目介绍文件</p></li><li><p><code>vite.config.js</code>：vite配置文件</p></li></ul></blockquote><p><img src="http://file.zjay.top//blog/images/202308301625431.png" alt="image-20230830162456615"></p><h3 id="运行模式" tabindex="-1"><a class="header-anchor" href="#运行模式" aria-hidden="true">#</a> 运行模式</h3><ul><li><p>项目创建后会默认会在<code>package.json</code>中添加如下默认配置：</p><blockquote><p>模式名称可以自定义，不一定是 <code>development</code>、<code>production</code></p></blockquote></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run dev，运行，mode为&#39;development&#39;,加载 .env.development 和.env 文件</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build，构建，mode为&#39;production&#39;,加载 .env.production和.env 文件</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span>  <span class="token comment">// npm run preview，预览本地构建</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过<code>--mode</code>指定模式,下面是修改后的配置</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite --mode dev&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run dev，运行，mode 为&#39;dev&#39;,加载 .env.dev 和 .env 文件</span>
        <span class="token property">&quot;sta&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite --mode sta&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run sta，运行，mode 为&#39;sta&#39;,加载 .env.sta 和.env 文件</span>
        <span class="token property">&quot;pro&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite --mode pro&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run pro，运行，mode 为&#39;pro&#39;,加载 .env.dev 和.env 文件</span>
        <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build --mode pro&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build，打包，mode 为&#39;pro&#39;,加载 .env.pro 和.env 文件</span>
        <span class="token property">&quot;build:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build --mode dev&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build:dev，构建，mode 为&#39;dev&#39;,加载 .env.dev 和 .env 文件</span>
        <span class="token property">&quot;build:sta&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build --mode sta&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build:sta，构建，mode 为&#39;sta&#39;,加载 .env.sta 和 .env 文件</span>
        <span class="token property">&quot;build:pro&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build --mode pro&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build:pro，构建，mode 为&#39;pro&#39;,加载 .env.pro 和 .env 文件</span>
        <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span>  <span class="token comment">// npm run preview，预览本地构建</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>配置文件加载说明</p><blockquote><p>项目根目录创建配置文件即可</p></blockquote></li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token punctuation">.</span>env                <span class="token comment"># 所有模式下都会加载</span>
<span class="token punctuation">.</span>env<span class="token punctuation">.</span>local          <span class="token comment"># 所有模式下都会加载，但会被 git 忽略</span>
<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token namespace">[mode]</span>         <span class="token comment"># 只在指定模式下加载，优先级高于.env，如果变量名一样会覆盖</span>
<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token namespace">[mode]</span><span class="token punctuation">.</span>local   <span class="token comment"># 只在指定模式下加载，但会被 git 忽略，优先级高于.env，如果变量名一样会覆盖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><blockquote><p>Vite 在 <code>i<wbr>mport.meta.env</code> 对象上暴露环境变量</p></blockquote><ul><li>内建环境变量</li></ul><table><thead><tr><th>变量名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>MODE</td><td>string</td><td>应用运行的模式</td></tr><tr><td>BASE_URL</td><td>string</td><td>部署应用时的基本 URL。他由base 配置项决定</td></tr><tr><td>PROD</td><td>boolean</td><td>应用是否运行在生产环境</td></tr><tr><td>DEV</td><td>boolean</td><td>应用是否运行在开发环境 (永远与 i<wbr>mport.meta.env.PROD相反)。</td></tr><tr><td>SSR</td><td>boolean</td><td>应用是否运行在 server 上。</td></tr></tbody></table><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>环境变量信息：{{ env }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://file.zjay.top//blog/images/202308301730268.png" alt="image-20230830173053760"></p><ul><li>自定义环境变量</li></ul><blockquote><ul><li>根目录下新建 <code>.env</code>文件</li><li>定义变量，变量名必须要<code>VITE</code>开头（下面无法获取<code>APP_TXT</code>的值）</li><li>如果想修改前缀需要在<code>vite.config.js</code>里面添加<code>envPrefix</code>配置，例如：<code>envPrefix:&#39;APP&#39;</code>或者<code>envPrefix:[&#39;APP&#39;]</code></li></ul></blockquote><p><img src="http://file.zjay.top//blog/images/202308301744376.png" alt="image-20230830174436132"></p><p><img src="http://file.zjay.top//blog/images/202308301747567.png" alt="image-20230830174718891"></p><ul><li>自定义环境变量前缀</li></ul><p><code>vite.config.js</code>里面添加如下信息：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">envPrefix</span><span class="token operator">:</span> <span class="token string">&#39;APP&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统别名" tabindex="-1"><a class="header-anchor" href="#系统别名" aria-hidden="true">#</a> 系统别名</h3><blockquote><p><code>import</code>静态文件、组件 时如果层级过深不太方便，可以通过别名方式来进行优化</p></blockquote><ul><li><code>vite.config.js</code>里面添加如下信息：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;@/*&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;src/*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>import HelloWorld from &#39;@/components/HelloWorld.vue&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="指令介绍" tabindex="-1"><a class="header-anchor" href="#指令介绍" aria-hidden="true">#</a> 指令介绍</h2><h3 id="内置指令" tabindex="-1"><a class="header-anchor" href="#内置指令" aria-hidden="true">#</a> 内置指令</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>v-bind</code></td><td>属性绑定(简写为<code>:</code>)，如果绑定的值是 <code>null</code> 或者 <code>undefined</code>，那么该 <code>attribute </code> 将会从渲染的元素上移除</td></tr><tr><td><code>v-html</code></td><td>插入<code>html</code>代码</td></tr><tr><td><code>v-if</code> <code>v-if-else</code> <code>v-else</code></td><td>条件渲染，根据条件显示不同的内容，如果同时切换多个元素，可以在 <code>&lt;template&gt;</code> 上使用</td></tr><tr><td><code>v-show</code></td><td>条件渲染，会保留该元素仅切换了该元素上 <code>display</code> 的 <code>CSS</code> 属性<br>相比<code>v-if</code>， 简单许多，元素无论初始条件如何，始终会存在，<br>如果需要频繁切换，则使用 <code>v-show</code> 较好，如果在运行时绑定条件很少改变，则 <code>v-if</code> 会更合适<br>不支持在 <code>&lt;template&gt;</code> 元素上使用</td></tr><tr><td><code>v-for</code></td><td>循环渲染，可以使用 <code>of</code> 作为分隔符来替代 <code>in</code><br>用法：<code>v-for=&quot;item in items&quot;</code> 或 <code>v-for=&quot;(item, index) in items&quot;</code></td></tr><tr><td><code>v-on</code></td><td>监听 DOM 事件(简写为 <code>@</code>)<br>用法：<code>v-on:click=&quot;handler&quot;</code> 或 <code>@click=&quot;handler($event)&quot;</code></td></tr></tbody></table><h3 id="v-bind绑定class" tabindex="-1"><a class="header-anchor" href="#v-bind绑定class" aria-hidden="true">#</a> <code>v-bind</code>绑定<code>class</code></h3><blockquote><p>数据绑定的一个常见需求场景是操纵元素的 CSS class 列表和内联样式。因为 <code>class</code> 和 <code>style</code> 都是 attribute，我们可以和其他 <code>attribute</code> 一样使用 <code>v-bind</code> 将它们和动态的字符串绑定。但是，在处理比较复杂的绑定时，通过拼接生成字符串是麻烦且易出错的。因此，<code>Vue </code>专门为 <code>class</code> 和 <code>style</code> 的 <code>v-bind</code> 用法提供了特殊的功能增强。除了字符串外，表达式的值也可以是对象或数组。</p></blockquote><ul><li>动态切换 <code>class</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ts</span>
<span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ active: isActive }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code> <span class="token comment">&lt;!-- 渲染结果 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>active<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>绑定对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ts</span>
<span class="token keyword">const</span> classObject <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  text<span class="token operator">-</span>danger<span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classObject<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code> <span class="token comment">&lt;!-- 渲染结果 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>active<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>绑定计算属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ts</span>
<span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> classObject <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">active</span><span class="token operator">:</span> isActive<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  text<span class="token operator">-</span>danger<span class="token operator">:</span> error<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>value<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;fatal&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classObject<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>绑定数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ts</span>
<span class="token keyword">const</span> activeClass <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> errorClass <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;text-danger&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[activeClass, errorClass]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>绑定表达式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ts</span>
<span class="token keyword">const</span> activeClass <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> errorClass <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;text-danger&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isActive  <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[isActive ? activeClass : &#39;&#39;, errorClass]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-bind绑定style" tabindex="-1"><a class="header-anchor" href="#v-bind绑定style" aria-hidden="true">#</a> <code>v-bind</code>绑定<code>style</code></h3><ul><li>绑定值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ts</span>
<span class="token keyword">const</span> activeColor <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fontSize <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ color: activeColor, fontSize: fontSize + &#39;px&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>绑定对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ts</span>
<span class="token keyword">const</span> styleObject <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;13px&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styleObject<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-for遍历对象" tabindex="-1"><a class="header-anchor" href="#v-for遍历对象" aria-hidden="true">#</a> <code>v-for</code>遍历对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ts</span>
<span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;How to do lists in Vue&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">publishedAt</span><span class="token operator">:</span> <span class="token string">&#39;2016-04-10&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(value, key) in myObject<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ key }}: {{ value }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-on事件处理" tabindex="-1"><a class="header-anchor" href="#v-on事件处理" aria-hidden="true">#</a> <code>v-on</code>事件处理</h3><blockquote><ul><li><p>事件处理器 (handler) 的值可以是：</p><ul><li><p>内联事件处理器：事件被触发时执行的内联 JavaScript 语句 (与 <code>onclick</code> 类似)。</p></li><li><p>方法事件处理器：一个指向组件上定义的方法的属性名或是路径。</p></li></ul></li><li><p>模板编译器会通过检查 <code>v-on</code> 的值是否是合法的 JavaScript 标识符或属性访问路径来断定是何种形式的事件处理器</p><ul><li><p><code>foo()</code> 和 <code>count++</code> 会被视为内联事件处理器。</p></li><li><p><code>foo</code>、<code>foo.bar</code> 和 <code>foo[&#39;bar&#39;]</code> 会被视为方法事件处理器，</p></li></ul></li></ul></blockquote><ul><li>内联事件处理器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Add 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Count is: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>内联事件处理器中访问事件参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里可以访问原生事件</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 使用特殊的 $event 变量 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>warn(&#39;Form cannot be submitted yet.&#39;, $event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Submit
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 使用内联箭头函数 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(event) =&gt; warn(&#39;Form cannot be submitted yet.&#39;, event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Submit
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法事件处理器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Vue.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \`event\` 是 DOM 原生事件</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- \`greet\` 是上面定义过的方法名 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>greet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Greet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>事件修饰符</li></ul><blockquote><p>在处理事件时调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是很常见的。可以使用事件修饰符替代</p></blockquote><table><thead><tr><th style="text-align:left;">修饰符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>.stop</code></td><td>停止事件传递</td></tr><tr><td style="text-align:left;"><code>.prevent</code></td><td>禁止默认事件</td></tr><tr><td style="text-align:left;"><code>.self</code></td><td>仅当 event.target 是元素本身时才会触发事件处理器</td></tr><tr><td style="text-align:left;"><code>.capture</code></td><td>添加事件监听器</td></tr><tr><td style="text-align:left;"><code>.once</code></td><td>添加事件监听器</td></tr><tr><td style="text-align:left;"><code>.passive</code></td><td>添加事件监听器</td></tr></tbody></table><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 单击事件将停止传递 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 提交事件将不再重新加载页面 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSubmit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 修饰语可以使用链式书写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.stop.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 也可以只有修饰符 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 仅当 event.target 是元素本身时才会触发事件处理器 --&gt;</span>
<span class="token comment">&lt;!-- 例如：事件处理器不来自子元素 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 添加事件监听器时，使用 \`capture\` 捕获模式 --&gt;</span>
<span class="token comment">&lt;!-- 例如：指向内部元素的事件，在被内部元素处理前，先被外部处理 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 点击事件最多被触发一次 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.once</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 滚动事件的默认行为 (scrolling) 将立即发生而非等待 \`onScroll\` 完成 --&gt;</span>
<span class="token comment">&lt;!-- 以防其中包含 \`event.preventDefault()\` --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@scroll.passive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onScroll<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>按键修饰符</li></ul><blockquote><p>在监听键盘事件时 我们经常需要检查特定的按键 可以直接使用按键名称作为修饰符，但需要转为 kebab-case 形式</p><ul><li>按键别名:<code>.enter</code> <code>.tab</code> <code>.delete</code> <code>.esc</code> <code>.space</code> <code>.up</code> <code>.down</code> <code>.left</code> <code>.right</code></li><li>系统按键修饰符: <code>.ctrl </code> <code>.alt</code> <code>.shift </code> <code>.meta</code> <code>.exact</code><ul><li>与常规按键不同,与 <code>keyup</code> 事件一起使用时，该按键在事件发出时必须处于按下状态</li><li>在 Mac 键盘上，meta 是 Command 键 。在 Windows 键盘上，meta 键是 Windows 键</li><li><code>.exact</code> 修饰符允许控制触发一个事件所需的确定组合的系统按键修饰符。</li></ul></li><li>鼠标按键修饰符: <code>.left</code> <code>.right</code> <code>.middle</code></li></ul></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- PageDown --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.page-down</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onPageDown<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- Enter --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- Alt + Enter --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.alt.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clear<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- Ctrl + 点击 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Do something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.ctrl.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onCtrlClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h3><p>https://cn.vuejs.org/guide/reusability/custom-directives.html</p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><h2 id="组件介绍" tabindex="-1"><a class="header-anchor" href="#组件介绍" aria-hidden="true">#</a> 组件介绍</h2><h2 id="渲染机制" tabindex="-1"><a class="header-anchor" href="#渲染机制" aria-hidden="true">#</a> 渲染机制</h2><h2 id="集成-typescript" tabindex="-1"><a class="header-anchor" href="#集成-typescript" aria-hidden="true">#</a> 集成 TypeScript</h2><h2 id="集成-vuerouter" tabindex="-1"><a class="header-anchor" href="#集成-vuerouter" aria-hidden="true">#</a> 集成 VueRouter</h2><h2 id="集成-axios" tabindex="-1"><a class="header-anchor" href="#集成-axios" aria-hidden="true">#</a> 集成 Axios</h2><h2 id="集成-mockjs" tabindex="-1"><a class="header-anchor" href="#集成-mockjs" aria-hidden="true">#</a> 集成 MockJs</h2><h2 id="集成-vuex" tabindex="-1"><a class="header-anchor" href="#集成-vuex" aria-hidden="true">#</a> 集成 Vuex</h2><h2 id="动画技巧" tabindex="-1"><a class="header-anchor" href="#动画技巧" aria-hidden="true">#</a> 动画技巧</h2><h2 id="自定义插件" tabindex="-1"><a class="header-anchor" href="#自定义插件" aria-hidden="true">#</a> 自定义插件</h2><h2 id="自定义组件库" tabindex="-1"><a class="header-anchor" href="#自定义组件库" aria-hidden="true">#</a> 自定义组件库</h2><h2 id="自定义脚手架" tabindex="-1"><a class="header-anchor" href="#自定义脚手架" aria-hidden="true">#</a> 自定义脚手架</h2><h2 id="新能优化" tabindex="-1"><a class="header-anchor" href="#新能优化" aria-hidden="true">#</a> 新能优化</h2>`,102);function m(g,b){const s=e("ExternalLinkIcon");return p(),o("div",null,[u,d,r,n("blockquote",null,[n("p",null,[a("项目使用vite搭建，其它vite配置可以参考："),n("a",k,[a("vite官网"),c(s)])])]),v])}const q=t(i,[["render",m],["__file","vue3.html.vue"]]);export{q as default};
