import{_ as t,r as p,o,c,b as n,d as s,e as l,a}from"./app-f0dbfa43.js";const i={},d=a(`<p>[toc]</p><h2 id="创建应用" tabindex="-1"><a class="header-anchor" href="#创建应用" aria-hidden="true">#</a> 创建应用</h2><h3 id="_1-使用vite构建项目" tabindex="-1"><a class="header-anchor" href="#_1-使用vite构建项目" aria-hidden="true">#</a> 1.使用<code>vite</code>构建项目</h3><blockquote><ul><li><code>my-vue-app</code>：项目的名称，小写多个单词用<code>-</code>分割</li><li><code>template</code>“：指定vite创建的项目模板，这里指定创建vue</li></ul></blockquote><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment"># npm 6.x</span>
npm create vite@latest my-vue-app <span class="token operator">--</span>template vue

<span class="token comment"># npm 7+, extra double-dash is needed:</span>
npm create vite@latest my-vue-app <span class="token operator">--</span> <span class="token operator">--</span>template vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://file.zjay.top//blog/images/202308301614738.png" alt="image-20230830161436887"></p><h3 id="_2-安装依赖运行" tabindex="-1"><a class="header-anchor" href="#_2-安装依赖运行" aria-hidden="true">#</a> 2.安装依赖运行</h3><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment"># 切换到项目路径</span>
cd vue3-study 
<span class="token comment"># 安装依赖</span>
npm install
<span class="token comment"># 运行</span>
npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://file.zjay.top//blog/images/202308301621915.png" alt="image-20230830162058314"></p><p><img src="http://file.zjay.top//blog/images/202308301621201.png" alt="image-20230830162153965"></p><h2 id="项目结构介绍" tabindex="-1"><a class="header-anchor" href="#项目结构介绍" aria-hidden="true">#</a> 项目结构介绍</h2><blockquote><ul><li><p><code>node_modules</code>：安装的依赖模块文件</p></li><li><p><code>public</code>：存放项目需要使用的静态资源，不参加编译，编译后可以替换</p></li><li><p><code>src</code>：项目开发目录</p><ul><li><p><code>assets</code>：放置静态资源，参加编译，编译后不可替换</p></li><li><p><code>components</code>：放置通用模块组件</p></li><li><p><code>App.vue</code>：入口组件</p></li><li><p><code>main.js</code>：入口 js 文件，影响全局，作用是引入全局使用的库、公共的样式和方法、设置路由等</p></li><li><p><code>style.css</code>：全局样式，默认会在<code>main.js</code>引用，可以放到<code>assets</code>，只需修改引用路径即可</p></li></ul></li><li><p><code>index.html</code>：项目的运行入口</p></li><li><p><code>package.json</code>：记录项目信息和依赖模块信息，如果文件不存在可以通过<code>npm init --yes</code>来初始化生成<code>package.json</code>文件</p></li><li><p><code>package-lock.json</code>：记录所有模块锁定的版本号，包括主模块和所有依赖子模块。当你执行<code>npm install</code>的时候，<code>node</code>从<code>package.json</code>文件读取模块名称，从<code>package-lock.json</code>文件中获取版本号，然后进行下载或者更新。正因为有了<code>package-lock.json</code>文件锁定版本号，所以当你执行<code>npm install</code>的时候，<code>node</code>不会自动更新<code>package.json</code>文件中的模块，必须用<code>npm install packagename@x.x.x</code>进行安装才会更新，<code>package-lock.json</code>文件中的版本号也会随着更新，如果文件不存在那么可以执行<code>npm install</code>，<code>node</code>会重新生成<code>package-lock.json</code>文件</p></li><li><p><code>README.md</code>：项目介绍文件</p></li><li><p><code>vite.config.js</code>：vite配置文件</p></li></ul></blockquote><p><img src="http://file.zjay.top//blog/images/202308301625431.png" alt="image-20230830162456615"></p><h2 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置" aria-hidden="true">#</a> 项目配置</h2>`,14),r={href:"https://cn.vitejs.dev/config/",target:"_blank",rel:"noopener noreferrer"},u=a(`<h3 id="_1-环境变量" tabindex="-1"><a class="header-anchor" href="#_1-环境变量" aria-hidden="true">#</a> 1.环境变量</h3><h4 id="_1-1-内建变量" tabindex="-1"><a class="header-anchor" href="#_1-1-内建变量" aria-hidden="true">#</a> 1.1.内建变量</h4><table><thead><tr><th>变量名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>MODE</td><td>string</td><td>应用运行的模式</td></tr><tr><td>BASE_URL</td><td>string</td><td>部署应用时的基本 URL。他由base 配置项决定</td></tr><tr><td>PROD</td><td>boolean</td><td>应用是否运行在生产环境</td></tr><tr><td>DEV</td><td>boolean</td><td>应用是否运行在开发环境 (永远与 i<wbr>mport.meta.env.PROD相反)。</td></tr><tr><td>SSR</td><td>boolean</td><td>应用是否运行在 server 上。</td></tr></tbody></table><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>环境变量信息：{{ env }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://file.zjay.top//blog/images/202308301730268.png" alt="image-20230830173053760"></p><h4 id="_1-2-自定义变量" tabindex="-1"><a class="header-anchor" href="#_1-2-自定义变量" aria-hidden="true">#</a> 1.2.自定义变量</h4><blockquote><ul><li>根目录下新建 <code>.env</code>文件</li><li>定义变量，变量名必须要<code>VITE</code>开头（下面无法获取<code>APP_TXT</code>的值）</li><li>如果想修改前缀需要在<code>vite.config.js</code>里面添加<code>envPrefix</code>配置，例如：<code>envPrefix:&#39;APP&#39;</code>或者<code>envPrefix:[&#39;APP&#39;]</code></li></ul></blockquote><p><img src="http://file.zjay.top//blog/images/202308301744376.png" alt="image-20230830174436132"></p><p><img src="http://file.zjay.top//blog/images/202308301747567.png" alt="image-20230830174718891"></p><h4 id="_1-3-env文件" tabindex="-1"><a class="header-anchor" href="#_1-3-env文件" aria-hidden="true">#</a> 1.3.<code>.env</code>文件</h4><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token punctuation">.</span>env                <span class="token comment"># 所有模式下都会加载</span>
<span class="token punctuation">.</span>env<span class="token punctuation">.</span>local          <span class="token comment"># 所有模式下都会加载，但会被 git 忽略</span>
<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token namespace">[mode]</span>         <span class="token comment"># 只在指定模式下加载，优先级高于.env，如果变量名一样会覆盖</span>
<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token namespace">[mode]</span><span class="token punctuation">.</span>local   <span class="token comment"># 只在指定模式下加载，但会被 git 忽略，优先级高于.env，如果变量名一样会覆盖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-默认模式" tabindex="-1"><a class="header-anchor" href="#_1-4-默认模式" aria-hidden="true">#</a> 1.4.默认模式</h4><ul><li>项目创建后会默认会在<code>package.json</code>中添加如下默认配置：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run dev，运行，mode为&#39;development&#39;,加载 .env.development 和.env 文件</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build，构建，mode为&#39;production&#39;,加载 .env.production和.env 文件</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span>  <span class="token comment">// npm run preview，预览本地构建</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过<code>--mode</code>指定模式,下面是修改后的配置（模式名称可以自定义，不一定是<code>development</code>、<code>production</code>）</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite --mode dev&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run dev，运行，mode 为&#39;dev&#39;,加载 .env.dev 和 .env 文件</span>
        <span class="token property">&quot;sta&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite --mode sta&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run sta，运行，mode 为&#39;sta&#39;,加载 .env.sta 和.env 文件</span>
        <span class="token property">&quot;pro&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite --mode pro&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run pro，运行，mode 为&#39;pro&#39;,加载 .env.dev 和.env 文件</span>
        <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build --mode pro&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build，打包，mode 为&#39;pro&#39;,加载 .env.pro 和.env 文件</span>
        <span class="token property">&quot;build:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build --mode dev&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build:dev，构建，mode 为&#39;dev&#39;,加载 .env.dev 和 .env 文件</span>
        <span class="token property">&quot;build:sta&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build --mode sta&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build:sta，构建，mode 为&#39;sta&#39;,加载 .env.sta 和 .env 文件</span>
        <span class="token property">&quot;build:pro&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-tsc &amp;&amp; vite build --mode pro&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm run build:pro，构建，mode 为&#39;pro&#39;,加载 .env.pro 和 .env 文件</span>
        <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span>  <span class="token comment">// npm run preview，预览本地构建</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-系统别名" tabindex="-1"><a class="header-anchor" href="#_2-系统别名" aria-hidden="true">#</a> 2.系统别名</h3><blockquote><p><code>import</code>静态文件、组件 时如果层级过深不太方便，可以通过别名方式来进行优化</p></blockquote><ul><li><code>vite.config.js</code>里面添加如下信息：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;@/*&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;src/*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>import HelloWorld from &#39;@/components/HelloWorld.vue&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-环境变量前缀" tabindex="-1"><a class="header-anchor" href="#_3-环境变量前缀" aria-hidden="true">#</a> 3.环境变量前缀</h3><p><code>vite.config.js</code>里面添加如下信息：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">envPrefix</span><span class="token operator">:</span> <span class="token string">&#39;APP&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25);function v(m,k){const e=p("ExternalLinkIcon");return o(),c("div",null,[d,n("blockquote",null,[n("p",null,[s("其它配置可以参考："),n("a",r,[s("vite官网"),l(e)])])]),u])}const b=t(i,[["render",v],["__file","项目搭建.html.vue"]]);export{b as default};
